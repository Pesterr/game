pПишем простенькую пошаговую игру на двоих игроков)

Создайте класс Character, предусмотрите в нем следующие свойства: имя, максимальное здоровье, текущее здоровье, сила урона, сила лечения
Создайте в классе Character публичный метод Info - выводит в консоль всю информацию о персонаже

Создайте класс Game, который будет содержать два свойства типа Character с именами FirstPlayer и SecondPlayer. 
Создайте в классе Game публичный метод CreatePlayers, который будет инициализировать свойства FirstPlayer и SecondPlayer новыми объектами со следующими значениями свойств:
 - Имя - указывается пользователем в консоли запросом формата: "введите имя первого героя" или "введите имя второго героя"
 - Максимальное здоровье - случайное значение от 10 до 20
 - Текущее здоровье равно максимальному
 - Сила урона - случайное значение от 3 до 5
 - Сила лечения - случайное значение от 1 до 3
Создайте в классе Game публичный метод StartGame, без аргументов. В этом методе будет:
1) Сообщение о начале боя, вывод информации о противниках (с помощью метода Info)
2) Цикл для запроса команд от пользователя
Сначала в цикле должна происходить проверка на то, что у обоих игроков текущий уровень здоровья больше 0.
Если у одного из игроков текущий уровень здоровья меньше либо равен 0, то цикл завершается с сообщением, что этот игрок проиграл бой.
Далее идет предложение сделать ход в формате:
 "Ход первого (или второго) игрока. Выберите действие, указав цифру:" 
 "1 - атака"
 "2 - лечение"
При вводе цифры 1 текущий персонаж атакует другого персонажа, при вводе цифры 2 текущий игрок пытается лечиться. Заметьте, что при каждой итерации цикла активный персонаж должен сменяться, 
для этого можно создать переменную currentPlayer и назначать туда то FirstPlayer, то SecondPlayer. А команды ниже выполнять с переменной currentPlayer. 
Для этих действий добавьте в класс Character методы:
 - публичный метод Attack, аргумент типа Character. (в аргумент должен передаваться второй игрок. Если currentPlayer это FirstPlayer, то в метод Attack передаем SecondPlayer и наоборот) 
 - публичный метод Damage, аргумент типа int. 
 - публичный метод Heal, аргументов нет
 Содержимое метода Attack - генерируется случайное число от 1 до силы урона текущего игрока, далее этот урон передается в метод Damage на экземпляре атакуемого игрока (из аргумента метода). В консоль выводится сообщение: Персонаж (Имя текущего игрока) ударяет персонажа (Имя атакуемого игрока) с силой урона (значение урона) 
 Содержимое метода Damage - число урона из аргумента отнимается из текущего здоровья игрока. В консоль выводится сообщение: (Имя игрока) получает урон. Здоровье: (текущее здоровье)/(максимальное здоровье).
 Содержимое метода Heal - генерируется случайное число от 1 до силы лечения текущего игрока, далее это значение добавляется к текущему уровню здоровья. Если текущий уровень здоровья превышает максимальный уровень здоровья, то текущий уровень должен снизиться до максимального.

В методе Main класса Program создайте экземпляр класса Game и цикл для запроса команд от пользователя. 
Реализуйте команды в цикле:
 - Start - вызов метода CreatePlayers в объекте Game, затем вызов метода StartGame в объекте Game
 - Exit - выход из приложения
 
Можно расширить возможности игры:
- добавить игроку свойство: Defence - показатель защиты, тогда следует прописать этот показатель в методе Damage - уменьшать значение урона на величину Defence
- добавить игроку свойство: Dodge - вероятность уклонения при получении урона - опять можно редактировать метод Damage - генерировать число от 1 до 100, если оно меньше чем показатель Dodge - писать в консоль, что игрок увернулся от удара и не получил урон
- добавить вариант хода: 3 - фокусировка - для реализации добавить в класс Character поле increaseDamage и метод IncreaseDamage, в котором в поле increaseDamage будет назначаться случайное значение от 1 до 3. Также 
increaseDamage следует прописать в методе Attack - добавлять к сгенерированному урону, после чего обнулять. (Получится одноразовое увеличение урона).

Можно проявить фантазию и добавить еще параметров, методов и вариантов ходов

Дополнение от 14.11
1) Создайте абстракный класс Weapon, в нем опишите: строковое свойство Title, целочисленные свойства: MinDamage, MaxDamage и абстрактный метод Attack, который возвращает целое число
Создайте несколько классов-наследников для класса Weapon c разными значениями в свойствах и разной реализацией метода Attack (как минимум пишите в консоль разные строчки). При этом метод Attack должен возвращать значение урона, которое выдает оружие
Создайте в класе Character свойство типа Weapon
В классе Character есть метод Attack, надо его изменить: генерация урона теперь находится в объекте Weapon в методе Attack, так что просто вызываем Weapon.Attack, получаем цифру, передаем ее в метод Damage на экземпляре атакуемого игрока
При старте игры FirstPlayer и SecondPlayer должны получить оружие случайного типа, т.е. каждому объекту в свойство Weapon назначаем случайный объект из созданных вами классов-наследников

Еще создайте класс CriticalWeapon, который случайным образом может удвоить свой урон во время использования

2) Создайте абстрактный класс Armor. В нем целочисленное свойство Defence и абстрактный метод ReductDamage, который принимает один целочисленный аргумент и возвращает целочисленное значение. Назначение метода - уменьшить входящий урон и вернуть его новое значение
Создайте классы LightArmor и HeavyArmor с разными реализациями метода ReductDamage, например тяжелая броня с некоторым шансом уменьшает урон на двойное значение свойства Defence, а легкая броня дает шанс, что урон пройдет вскольз и снизится до 1.
Создайте в класе Character свойство типа Armor, впишите использование этого свойства в метод Damage, т.е. сначала входящий урон передается броне, а урон, который возвращает броня уже отнимается от здоровья
При старте игры FirstPlayer и SecondPlayer должны получить броню случайного типа

Еще создайте класс MagicArmor, который случайным образом может сделать урон отрицательным, тем самым излечивая носителя